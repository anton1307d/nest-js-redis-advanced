services:
  api:
    build:
      dockerfile: ./.infra/Dockerfile
      context: .
      target: development
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    ports:
      - '8000:8000'
    depends_on:
      - postgres
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres:/var/lib/postgresql/data

  redis-master:
    container_name: "redis-master"
    image: redis:6.0-alpine
    command: redis-server
    ports:
      - "6379:6379"

  redis-slave1:
    container_name: "redis-slave1"
    image: redis:6.0-alpine
    ports:
      - "6380:6379"
    command: redis-server --slaveof redis-master 6379
    depends_on:
      - redis-master

  redis-slave2:
    container_name: "redis-slave2"
    image: redis:6.0-alpine
    ports:
      - "6381:6379"
    command: redis-server --slaveof redis-master 6379
    depends_on:
      - redis-master

  redis-sentinel1:
    container_name: 'redis-sentinel1'
    image: redis:6.0-alpine
    ports:
      - "5000:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./.infra/local/services/redis/sentinel.conf:/etc/sentinel.conf"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2

  redis-sentinel2:
    container_name: 'redis-sentinel2'
    image: redis:6.0-alpine
    ports:
      - "5001:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./.infra/local/services/redis/sentinel.conf:/etc/sentinel.conf"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2

  redis-sentinel3:
    container_name: 'redis-sentinel3'
    image: redis:6.0-alpine
    ports:
      - "5002:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./.infra/local/services/redis/sentinel.conf:/etc/sentinel.conf"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2

  # monitoring
  telegraf:
    image: telegraf:1.25.2-alpine
    volumes:
      - ./.infra/telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
    ports:
      - '127.0.0.1:8125:8125/udp'

  influxdb:
    image: influxdb:1.8-alpine
    env_file: ./.infra/configuration.env
    ports:
      - '127.0.0.1:8086:8086'
    volumes:
      - ./.infra/:/imports
      - influxdb_data:/var/lib/influxdb

  socket-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    restart: always
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '127.0.0.1:2375:2375'
    environment:
      - LOG_LEVEL=debug # debug,info,notice,warning,err,crit,alert,emerg
      - CONTAINERS=1
      - INFO=1

  grafana:
    image: grafana/grafana:8.0.2
    depends_on:
      - influxdb
    env_file: ./.infra/configuration.env
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./.infra/grafana/provisioning/:/etc/grafana/provisioning/
      - ./.infra/grafana/dashboards/:/var/lib/grafana/dashboards/


volumes:
  postgres:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
